// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "opencv_converters.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "NAryMatNDIterator.pypp.hpp"

namespace bp = boost::python;

struct NAryMatNDIterator_wrapper : cv::NAryMatNDIterator, bp::wrapper< cv::NAryMatNDIterator > {

    NAryMatNDIterator_wrapper(cv::NAryMatNDIterator const & arg )
    : cv::NAryMatNDIterator( arg )
      , bp::wrapper< cv::NAryMatNDIterator >(){
        // copy constructor
        
    }

    NAryMatNDIterator_wrapper(::cv::MatND const & m1 )
    : cv::NAryMatNDIterator( boost::ref(m1) )
      , bp::wrapper< cv::NAryMatNDIterator >(){
        // constructor
    
    }

    NAryMatNDIterator_wrapper(::cv::MatND const & m1, ::cv::MatND const & m2 )
    : cv::NAryMatNDIterator( boost::ref(m1), boost::ref(m2) )
      , bp::wrapper< cv::NAryMatNDIterator >(){
        // constructor
    
    }

    NAryMatNDIterator_wrapper(::cv::MatND const & m1, ::cv::MatND const & m2, ::cv::MatND const & m3 )
    : cv::NAryMatNDIterator( boost::ref(m1), boost::ref(m2), boost::ref(m3) )
      , bp::wrapper< cv::NAryMatNDIterator >(){
        // constructor
    
    }

    NAryMatNDIterator_wrapper(::cv::MatND const & m1, ::cv::MatND const & m2, ::cv::MatND const & m3, ::cv::MatND const & m4 )
    : cv::NAryMatNDIterator( boost::ref(m1), boost::ref(m2), boost::ref(m3), boost::ref(m4) )
      , bp::wrapper< cv::NAryMatNDIterator >(){
        // constructor
    
    }

    NAryMatNDIterator_wrapper(::cv::MatND const & m1, ::cv::MatND const & m2, ::cv::MatND const & m3, ::cv::MatND const & m4, ::cv::MatND const & m5 )
    : cv::NAryMatNDIterator( boost::ref(m1), boost::ref(m2), boost::ref(m3), boost::ref(m4), boost::ref(m5) )
      , bp::wrapper< cv::NAryMatNDIterator >(){
        // constructor
    
    }

    NAryMatNDIterator_wrapper(::cv::MatND const & m1, ::cv::MatND const & m2, ::cv::MatND const & m3, ::cv::MatND const & m4, ::cv::MatND const & m5, ::cv::MatND const & m6 )
    : cv::NAryMatNDIterator( boost::ref(m1), boost::ref(m2), boost::ref(m3), boost::ref(m4), boost::ref(m5), boost::ref(m6) )
      , bp::wrapper< cv::NAryMatNDIterator >(){
        // constructor
    
    }

    NAryMatNDIterator_wrapper( )
    : cv::NAryMatNDIterator( )
      , bp::wrapper< cv::NAryMatNDIterator >(){
        // null constructor
    
    }

    static void init( ::cv::NAryMatNDIterator & inst, std::vector<cv::MatND> const & arrays ){
        
    std::vector<cv::MatND const *> buf_arrays(arrays.size());
    for(size_t i_arrays = 0; i_arrays<arrays.size(); ++i_arrays)
        buf_arrays[i_arrays] = (cv::MatND const *)&(arrays[i_arrays]);
        
        inst.init((cv::MatND const * *)(&buf_arrays[0]), arrays.size());
    }

    NAryMatNDIterator_wrapper const &iter() { return *this; }
    
    bp::object next()
    {
        if(idx >= nplanes)
        {
            PyErr_SetString(PyExc_StopIteration, "No more plane.");
            throw bp::error_already_set(); 
        }
        bp::object result(planes);
        if(idx >= nplanes-1) ++idx;
        else ++(*this);
        return result;
    }

};

static boost::shared_ptr<cv::NAryMatNDIterator> NAryMatNDIterator__init1__(std::vector<cv::MatND> const &arrays)
{
    std::vector<cv::MatND const *> buf_arrays(arrays.size());
    for(size_t i_arrays = 0; i_arrays<arrays.size(); ++i_arrays)
        buf_arrays[i_arrays] = (cv::MatND const *)&(arrays[i_arrays]);
        
    return boost::shared_ptr<cv::NAryMatNDIterator>(new cv::NAryMatNDIterator((cv::MatND const * *)(&buf_arrays[0]), arrays.size()));
}

void register_NAryMatNDIterator_class(){

    { //::cv::NAryMatNDIterator
        typedef bp::class_< NAryMatNDIterator_wrapper > NAryMatNDIterator_exposer_t;
        NAryMatNDIterator_exposer_t NAryMatNDIterator_exposer = NAryMatNDIterator_exposer_t( "NAryMatNDIterator", bp::init< cv::MatND const & >(( bp::arg("m1") )) );
        bp::scope NAryMatNDIterator_scope( NAryMatNDIterator_exposer );
        NAryMatNDIterator_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::NAryMatNDIterator >() );
        bp::implicitly_convertible< cv::MatND const &, cv::NAryMatNDIterator >();
        NAryMatNDIterator_exposer.def( bp::init< cv::MatND const &, cv::MatND const & >(( bp::arg("m1"), bp::arg("m2") )) );
        NAryMatNDIterator_exposer.def( bp::init< cv::MatND const &, cv::MatND const &, cv::MatND const & >(( bp::arg("m1"), bp::arg("m2"), bp::arg("m3") )) );
        NAryMatNDIterator_exposer.def( bp::init< cv::MatND const &, cv::MatND const &, cv::MatND const &, cv::MatND const & >(( bp::arg("m1"), bp::arg("m2"), bp::arg("m3"), bp::arg("m4") )) );
        NAryMatNDIterator_exposer.def( bp::init< cv::MatND const &, cv::MatND const &, cv::MatND const &, cv::MatND const &, cv::MatND const & >(( bp::arg("m1"), bp::arg("m2"), bp::arg("m3"), bp::arg("m4"), bp::arg("m5") )) );
        NAryMatNDIterator_exposer.def( bp::init< cv::MatND const &, cv::MatND const &, cv::MatND const &, cv::MatND const &, cv::MatND const &, cv::MatND const & >(( bp::arg("m1"), bp::arg("m2"), bp::arg("m3"), bp::arg("m4"), bp::arg("m5"), bp::arg("m6") )) );
        NAryMatNDIterator_exposer.def( bp::init< >() );
        { //::cv::NAryMatNDIterator::init
        
            typedef void ( *init_function_type )( cv::NAryMatNDIterator &,std::vector<cv::MatND> const & );
            
            NAryMatNDIterator_exposer.def( 
                "init"
                , init_function_type( &NAryMatNDIterator_wrapper::init )
                , ( bp::arg("inst"), bp::arg("arrays") )
                , "\nArgument 'arrays':"\
    "\n    C++ type: ::cv::MatND const * *."\
    "\n    Python type: vector_MatND."\
    "\nArgument 'count':"\
    "\n    Dependent argument: omitted from input. Its value is derived from "\
    "\n    argument 'arrays'." );
        
        }
        NAryMatNDIterator_exposer.def_readwrite( "arrays", &cv::NAryMatNDIterator::arrays );
        NAryMatNDIterator_exposer.def_readwrite( "nplanes", &cv::NAryMatNDIterator::nplanes );
        NAryMatNDIterator_exposer.def_readwrite( "planes", &cv::NAryMatNDIterator::planes );
        NAryMatNDIterator_exposer.def("__init__", bp::make_constructor(&NAryMatNDIterator__init1__, bp::default_call_policies(), (bp::arg("arrays"))));
        NAryMatNDIterator_exposer.def("__iter__", &NAryMatNDIterator_wrapper::iter, bp::return_self<>());
        NAryMatNDIterator_exposer.def("next", &NAryMatNDIterator_wrapper::next);
    }

}
