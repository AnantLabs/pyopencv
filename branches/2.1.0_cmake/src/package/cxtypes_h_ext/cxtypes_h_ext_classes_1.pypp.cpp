// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__array_1.pypp.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "cxtypes_h_wrapper.hpp"
#include "boost/python/object.hpp"
#include "boost/python/str.hpp"
#include "boost/python/list.hpp"
#include "boost/python/tuple.hpp"
#include "boost/python/object/life_support.hpp"
#include "cxtypes_h_ext_classes_1.pypp.hpp"

namespace bp = boost::python;

struct CvAttrList_wrapper : CvAttrList, bp::wrapper< CvAttrList > {

    CvAttrList_wrapper(CvAttrList const & arg )
    : CvAttrList( arg )
      , bp::wrapper< CvAttrList >(){
        // copy constructor
        
    }

    CvAttrList_wrapper()
    : CvAttrList()
      , bp::wrapper< CvAttrList >(){
        // null constructor
        
    }

    static CvAttrList * get_next(CvAttrList const & inst ){
        return inst.next;
    }
    
    static void set_next( CvAttrList & inst, CvAttrList * new_value ){ 
        inst.next = new_value;
    }

    static bp::object get_attr( CvString const & inst ){
    if(!inst.ptr) return bp::object();
    bp::list l;
    for(int i = 0; inst.ptr[i]; ++i) l.append(inst.ptr[i]);
    return bp::tuple(l);
}

};

static CvSeq * get_CvChain_h_prev( CvChain const & inst ) { return inst.h_prev; }

static CvSeq * get_CvChain_h_next( CvChain const & inst ) { return inst.h_next; }

static CvSeq * get_CvChain_v_prev( CvChain const & inst ) { return inst.v_prev; }

static CvSeq * get_CvChain_v_next( CvChain const & inst ) { return inst.v_next; }

static ::CvSeqBlock * get_CvChain_free_blocks( CvChain const & inst ) { return inst.free_blocks; }

static ::CvSeqBlock * get_CvChain_first( CvChain const & inst ) { return inst.first; }

static bp::object get_CvChain_block_max( CvChain const & inst ){        
    return inst.block_max? bp::str(inst.block_max): bp::object();
}

static bp::object get_CvChain_ptr( CvChain const & inst ){        
    return inst.ptr? bp::str(inst.ptr): bp::object();
}

static cv::MemStorage get_CvChain_storage(CvChain const &inst) { return cv::MemStorage(inst.storage); }

static cv::Point_<int> *get_CvChain_origin(CvChain const &inst) { return (cv::Point_<int> *)(&inst.origin); }

struct CvContour_wrapper : CvContour, bp::wrapper< CvContour > {

    CvContour_wrapper(CvContour const & arg )
    : CvContour( arg )
      , bp::wrapper< CvContour >(){
        // copy constructor
        
    }

    CvContour_wrapper()
    : CvContour()
      , bp::wrapper< CvContour >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 3>
    pyplusplus_reserved_wrapper( CvContour & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 3>( inst.reserved );
    }

};

static CvSeq * get_CvContour_h_prev( CvContour const & inst ) { return inst.h_prev; }

static CvSeq * get_CvContour_h_next( CvContour const & inst ) { return inst.h_next; }

static CvSeq * get_CvContour_v_prev( CvContour const & inst ) { return inst.v_prev; }

static CvSeq * get_CvContour_v_next( CvContour const & inst ) { return inst.v_next; }

static ::CvSeqBlock * get_CvContour_free_blocks( CvContour const & inst ) { return inst.free_blocks; }

static ::CvSeqBlock * get_CvContour_first( CvContour const & inst ) { return inst.first; }

static bp::object get_CvContour_block_max( CvContour const & inst ){        
    return inst.block_max? bp::str(inst.block_max): bp::object();
}

static bp::object get_CvContour_ptr( CvContour const & inst ){        
    return inst.ptr? bp::str(inst.ptr): bp::object();
}

static cv::MemStorage get_CvContour_storage(CvContour const &inst) { return cv::MemStorage(inst.storage); }

static cv::Rect_<int> *get_CvContour_rect(CvContour const &inst) { return (cv::Rect_<int> *)(&inst.rect); }

static CvSeq * get_CvGraph_h_prev( CvGraph const & inst ) { return inst.h_prev; }

static CvSeq * get_CvGraph_h_next( CvGraph const & inst ) { return inst.h_next; }

static CvSeq * get_CvGraph_v_prev( CvGraph const & inst ) { return inst.v_prev; }

static CvSeq * get_CvGraph_v_next( CvGraph const & inst ) { return inst.v_next; }

static ::CvSeqBlock * get_CvGraph_free_blocks( CvGraph const & inst ) { return inst.free_blocks; }

static ::CvSeqBlock * get_CvGraph_first( CvGraph const & inst ) { return inst.first; }

static bp::object get_CvGraph_block_max( CvGraph const & inst ){        
    return inst.block_max? bp::str(inst.block_max): bp::object();
}

static bp::object get_CvGraph_ptr( CvGraph const & inst ){        
    return inst.ptr? bp::str(inst.ptr): bp::object();
}

static ::CvSetElem * get_CvGraph_free_elems( CvGraph const & inst ) { return inst.free_elems; }

static ::CvSet * get_CvGraph_edges( CvGraph const & inst ) { return inst.edges; }

static cv::MemStorage get_CvGraph_storage(CvGraph const &inst) { return cv::MemStorage(inst.storage); }

static bp::object get_CvGraphEdge_next( CvGraphEdge const & inst ){
    bp::list l;
    for(int i = 0; i < 2; ++i)
        l.append(inst.next[i]);
    return bp::tuple(l);
}

static bp::object get_CvGraphEdge_vtx( CvGraphEdge const & inst ){
    bp::list l;
    for(int i = 0; i < 2; ++i)
        l.append(inst.vtx[i]);
    return bp::tuple(l);
}

static CvGraphEdge * get_CvGraphVtx_first( CvGraphVtx const & inst ) { return inst.first; }

static CvGraphEdge * get_CvGraphVtx2D_first( CvGraphVtx2D const & inst ) { return inst.first; }

static ::CvPoint2D32f * get_CvGraphVtx2D_ptr( CvGraphVtx2D const & inst ) { return inst.ptr; }

static bp::object get_data(CvMat const &inst)
{
    return bp::object(bp::handle<>(PyBuffer_FromReadWriteMemory(
        (void*)inst.data.ptr, inst.rows*inst.step)));
}

static CvMemBlock * get_CvMemBlock_prev( CvMemBlock const & inst ) { return inst.prev; }

static CvMemBlock * get_CvMemBlock_next( CvMemBlock const & inst ) { return inst.next; }

static ::CvMemBlock * get_CvMemStorage_bottom( CvMemStorage const & inst ) { return inst.bottom; }

static ::CvMemBlock * get_CvMemStorage_top( CvMemStorage const & inst ) { return inst.top; }

static cv::MemStorage get_CvMemStorage_parent(CvMemStorage const &inst) { return cv::MemStorage(inst.parent); }

static ::CvMemBlock * get_CvMemStoragePos_top( CvMemStoragePos const & inst ) { return inst.top; }

static CvModuleInfo * get_CvModuleInfo_next( CvModuleInfo const & inst ) { return inst.next; }

static ::CvPluginFuncInfo * get_CvModuleInfo_func_tab( CvModuleInfo const & inst ) { return inst.func_tab; }

static bp::object get_CvModuleInfo_name( CvModuleInfo const & inst ){        
    return inst.name? bp::str(inst.name): bp::object();
}

static bp::object get_CvModuleInfo_version( CvModuleInfo const & inst ){        
    return inst.version? bp::str(inst.version): bp::object();
}

struct CvPluginFuncInfo_wrapper : CvPluginFuncInfo, bp::wrapper< CvPluginFuncInfo > {

    CvPluginFuncInfo_wrapper(CvPluginFuncInfo const & arg )
    : CvPluginFuncInfo( arg )
      , bp::wrapper< CvPluginFuncInfo >(){
        // copy constructor
        
    }

    CvPluginFuncInfo_wrapper()
    : CvPluginFuncInfo()
      , bp::wrapper< CvPluginFuncInfo >(){
        // null constructor
        
    }

};

static bp::object get_CvPluginFuncInfo_func_names( CvPluginFuncInfo const & inst ){        
    return inst.func_names? bp::str(inst.func_names): bp::object();
}

static CvSeq * get_CvSeq_h_prev( CvSeq const & inst ) { return inst.h_prev; }

static CvSeq * get_CvSeq_h_next( CvSeq const & inst ) { return inst.h_next; }

static CvSeq * get_CvSeq_v_prev( CvSeq const & inst ) { return inst.v_prev; }

static CvSeq * get_CvSeq_v_next( CvSeq const & inst ) { return inst.v_next; }

static ::CvSeqBlock * get_CvSeq_free_blocks( CvSeq const & inst ) { return inst.free_blocks; }

static ::CvSeqBlock * get_CvSeq_first( CvSeq const & inst ) { return inst.first; }

static bp::object get_CvSeq_block_max( CvSeq const & inst ){        
    return inst.block_max? bp::str(inst.block_max): bp::object();
}

static bp::object get_CvSeq_ptr( CvSeq const & inst ){        
    return inst.ptr? bp::str(inst.ptr): bp::object();
}

static cv::MemStorage get_CvSeq_storage(CvSeq const &inst) { return cv::MemStorage(inst.storage); }

static CvSeqBlock * get_CvSeqBlock_prev( CvSeqBlock const & inst ) { return inst.prev; }

static CvSeqBlock * get_CvSeqBlock_next( CvSeqBlock const & inst ) { return inst.next; }

static bp::object get_CvSeqBlock_data( CvSeqBlock const & inst ){        
    return inst.data? bp::str(inst.data): bp::object();
}

static CvSeq * get_CvSet_h_prev( CvSet const & inst ) { return inst.h_prev; }

static CvSeq * get_CvSet_h_next( CvSet const & inst ) { return inst.h_next; }

static CvSeq * get_CvSet_v_prev( CvSet const & inst ) { return inst.v_prev; }

static CvSeq * get_CvSet_v_next( CvSet const & inst ) { return inst.v_next; }

static ::CvSeqBlock * get_CvSet_free_blocks( CvSet const & inst ) { return inst.free_blocks; }

static ::CvSeqBlock * get_CvSet_first( CvSet const & inst ) { return inst.first; }

static bp::object get_CvSet_block_max( CvSet const & inst ){        
    return inst.block_max? bp::str(inst.block_max): bp::object();
}

static bp::object get_CvSet_ptr( CvSet const & inst ){        
    return inst.ptr? bp::str(inst.ptr): bp::object();
}

static ::CvSetElem * get_CvSet_free_elems( CvSet const & inst ) { return inst.free_elems; }

static cv::MemStorage get_CvSet_storage(CvSet const &inst) { return cv::MemStorage(inst.storage); }

static CvSetElem * get_CvSetElem_next_free( CvSetElem const & inst ) { return inst.next_free; }

struct CvString_wrapper : CvString, bp::wrapper< CvString > {

    CvString_wrapper(CvString const & arg )
    : CvString( arg )
      , bp::wrapper< CvString >(){
        // copy constructor
        
    }

    CvString_wrapper()
    : CvString()
      , bp::wrapper< CvString >(){
        // null constructor
        
    }

    static bp::object get_data( CvString const & inst ){        
    return inst.ptr? bp::str((const char *)inst.ptr, inst.len) : bp::object();
}

};

static CvStringHashNode * get_CvStringHashNode_next( CvStringHashNode const & inst ) { return inst.next; }

static CvTypeInfo * get_CvTypeInfo_prev( CvTypeInfo const & inst ) { return inst.prev; }

static CvTypeInfo * get_CvTypeInfo_next( CvTypeInfo const & inst ) { return inst.next; }

static bp::object get_CvTypeInfo_type_name( CvTypeInfo const & inst ){        
    return inst.type_name? bp::str(inst.type_name): bp::object();
}

static bp::object MemStorage_from_CvMemStorage(bp::object const &inst_CvMemStorage)
{
    bp::extract<CvMemStorage *> elem(inst_CvMemStorage);
    if(!elem.check())
    {
        char s[300];
        sprintf( s, "Argument 'inst_CvMemStorage' must contain an object of type CvMemStorage." );
        PyErr_SetString(PyExc_TypeError, s);
        throw bp::error_already_set();
    }

    bp::object result = bp::object(::cv::Ptr< CvMemStorage >(elem()));
    result.attr("_depends") = inst_CvMemStorage;
    return result;
}

static CvMemStorage const &MemStorage_pointee(::cv::Ptr< CvMemStorage > const &inst) { return *((CvMemStorage const *)inst); }

void register_classes_1(){

    bp::class_< CvAttrList_wrapper >( "CvAttrList" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvAttrList >() )    
        .add_property( "next"
                    , bp::make_function( (::CvAttrList * (*)( ::CvAttrList const & ))(&CvAttrList_wrapper::get_next), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::CvAttrList &,::CvAttrList * ))(&CvAttrList_wrapper::set_next), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .add_property( "attr", bp::make_function(&CvAttrList_wrapper::get_attr) );

    bp::class_< CvChain >( "CvChain" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvChain >() )    
        .def_readwrite( "delta_elems", &CvChain::delta_elems )    
        .def_readwrite( "elem_size", &CvChain::elem_size )    
        .def_readwrite( "flags", &CvChain::flags )    
        .def_readwrite( "header_size", &CvChain::header_size )    
        .def_readwrite( "total", &CvChain::total )    
        .add_property( "h_prev", bp::make_function(&::get_CvChain_h_prev, bp::return_internal_reference<>()) )    
        .add_property( "h_next", bp::make_function(&::get_CvChain_h_next, bp::return_internal_reference<>()) )    
        .add_property( "v_prev", bp::make_function(&::get_CvChain_v_prev, bp::return_internal_reference<>()) )    
        .add_property( "v_next", bp::make_function(&::get_CvChain_v_next, bp::return_internal_reference<>()) )    
        .add_property( "free_blocks", bp::make_function(&::get_CvChain_free_blocks, bp::return_internal_reference<>()) )    
        .add_property( "first", bp::make_function(&::get_CvChain_first, bp::return_internal_reference<>()) )    
        .add_property( "block_max", &::get_CvChain_block_max )    
        .add_property( "ptr", &::get_CvChain_ptr )    
        .add_property( "storage", bp::make_function(&::get_CvChain_storage, bp::with_custodian_and_ward_postcall<0, 1>()) )    
        .add_property( "origin", bp::make_function(&::get_CvChain_origin, bp::return_internal_reference<>()) );

    { //::CvContour
        typedef bp::class_< CvContour_wrapper > CvContour_exposer_t;
        CvContour_exposer_t CvContour_exposer = CvContour_exposer_t( "CvContour" );
        bp::scope CvContour_scope( CvContour_exposer );
        CvContour_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< CvContour >() );
        CvContour_exposer.def_readwrite( "color", &CvContour::color );
        CvContour_exposer.def_readwrite( "delta_elems", &CvContour::delta_elems );
        CvContour_exposer.def_readwrite( "elem_size", &CvContour::elem_size );
        CvContour_exposer.def_readwrite( "flags", &CvContour::flags );
        CvContour_exposer.def_readwrite( "header_size", &CvContour::header_size );
        pyplusplus::containers::static_sized::register_array_1< int, 3 >( "__array_1_int_3" );
        { //CvContour::reserved [variable], type=int[3]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 3> ( *array_wrapper_creator )( CvContour & );
            
            CvContour_exposer.add_property( "reserved"
                , bp::make_function( array_wrapper_creator(&CvContour_wrapper::pyplusplus_reserved_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        CvContour_exposer.def_readwrite( "total", &CvContour::total );
        CvContour_exposer.add_property( "h_prev", bp::make_function(&::get_CvContour_h_prev, bp::return_internal_reference<>()) );
        CvContour_exposer.add_property( "h_next", bp::make_function(&::get_CvContour_h_next, bp::return_internal_reference<>()) );
        CvContour_exposer.add_property( "v_prev", bp::make_function(&::get_CvContour_v_prev, bp::return_internal_reference<>()) );
        CvContour_exposer.add_property( "v_next", bp::make_function(&::get_CvContour_v_next, bp::return_internal_reference<>()) );
        CvContour_exposer.add_property( "free_blocks", bp::make_function(&::get_CvContour_free_blocks, bp::return_internal_reference<>()) );
        CvContour_exposer.add_property( "first", bp::make_function(&::get_CvContour_first, bp::return_internal_reference<>()) );
        CvContour_exposer.add_property( "block_max", &::get_CvContour_block_max );
        CvContour_exposer.add_property( "ptr", &::get_CvContour_ptr );
        CvContour_exposer.add_property( "storage", bp::make_function(&::get_CvContour_storage, bp::with_custodian_and_ward_postcall<0, 1>()) );
        CvContour_exposer.add_property( "rect", bp::make_function(&::get_CvContour_rect, bp::return_internal_reference<>()) );
    }

    bp::class_< CvGenericHash >( "CvGenericHash" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvGenericHash >() );

    bp::class_< CvGraph >( "CvGraph" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvGraph >() )    
        .def_readwrite( "active_count", &CvGraph::active_count )    
        .def_readwrite( "delta_elems", &CvGraph::delta_elems )    
        .def_readwrite( "elem_size", &CvGraph::elem_size )    
        .def_readwrite( "flags", &CvGraph::flags )    
        .def_readwrite( "header_size", &CvGraph::header_size )    
        .def_readwrite( "total", &CvGraph::total )    
        .add_property( "h_prev", bp::make_function(&::get_CvGraph_h_prev, bp::return_internal_reference<>()) )    
        .add_property( "h_next", bp::make_function(&::get_CvGraph_h_next, bp::return_internal_reference<>()) )    
        .add_property( "v_prev", bp::make_function(&::get_CvGraph_v_prev, bp::return_internal_reference<>()) )    
        .add_property( "v_next", bp::make_function(&::get_CvGraph_v_next, bp::return_internal_reference<>()) )    
        .add_property( "free_blocks", bp::make_function(&::get_CvGraph_free_blocks, bp::return_internal_reference<>()) )    
        .add_property( "first", bp::make_function(&::get_CvGraph_first, bp::return_internal_reference<>()) )    
        .add_property( "block_max", &::get_CvGraph_block_max )    
        .add_property( "ptr", &::get_CvGraph_ptr )    
        .add_property( "free_elems", bp::make_function(&::get_CvGraph_free_elems, bp::return_internal_reference<>()) )    
        .add_property( "edges", bp::make_function(&::get_CvGraph_edges, bp::return_internal_reference<>()) )    
        .add_property( "storage", bp::make_function(&::get_CvGraph_storage, bp::with_custodian_and_ward_postcall<0, 1>()) );

    bp::class_< CvGraphEdge >( "CvGraphEdge" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvGraphEdge >() )    
        .def_readwrite( "flags", &CvGraphEdge::flags )    
        .def_readwrite( "weight", &CvGraphEdge::weight )    
        .add_property( "next", &::get_CvGraphEdge_next )    
        .add_property( "vtx", &::get_CvGraphEdge_vtx );

    bp::class_< CvGraphVtx >( "CvGraphVtx" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvGraphVtx >() )    
        .def_readwrite( "flags", &CvGraphVtx::flags )    
        .add_property( "first", bp::make_function(&::get_CvGraphVtx_first, bp::return_internal_reference<>()) );

    bp::class_< CvGraphVtx2D >( "CvGraphVtx2D" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvGraphVtx2D >() )    
        .def_readwrite( "flags", &CvGraphVtx2D::flags )    
        .add_property( "first", bp::make_function(&::get_CvGraphVtx2D_first, bp::return_internal_reference<>()) )    
        .add_property( "ptr", bp::make_function(&::get_CvGraphVtx2D_ptr, bp::return_internal_reference<>()) );

    bp::class_< CvMat >( "CvMat", "\nA multi-channel matrix."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Mat instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvmat" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvMat >(), "\nA multi-channel matrix."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Mat instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvmat" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvMat >() )    
        .def_readwrite( "cols", &CvMat::cols )    
        .def_readwrite( "width", &CvMat::width )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvMat >() )    
        .def_readwrite( "height", &CvMat::height )    
        .def_readwrite( "rows", &CvMat::rows )    
        .def_readwrite( "step", &CvMat::step )    
        .def_readwrite( "type", &CvMat::type )    
        .add_property("data", &::get_data);

    bp::class_< CvMemBlock >( "CvMemBlock" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvMemBlock >() )    
        .add_property( "prev", bp::make_function(&::get_CvMemBlock_prev, bp::return_internal_reference<>()) )    
        .add_property( "next", bp::make_function(&::get_CvMemBlock_next, bp::return_internal_reference<>()) );

    bp::class_< CvMemStorage >( "CvMemStorage" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvMemStorage >() )    
        .def_readwrite( "block_size", &CvMemStorage::block_size )    
        .def_readwrite( "free_space", &CvMemStorage::free_space )    
        .def_readwrite( "signature", &CvMemStorage::signature )    
        .add_property( "bottom", bp::make_function(&::get_CvMemStorage_bottom, bp::return_internal_reference<>()) )    
        .add_property( "top", bp::make_function(&::get_CvMemStorage_top, bp::return_internal_reference<>()) )    
        .add_property( "parent", bp::make_function(&::get_CvMemStorage_parent, bp::with_custodian_and_ward_postcall<0, 1>()) );

    bp::class_< CvMemStoragePos >( "CvMemStoragePos" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvMemStoragePos >() )    
        .def_readwrite( "free_space", &CvMemStoragePos::free_space )    
        .add_property( "top", bp::make_function(&::get_CvMemStoragePos_top, bp::return_internal_reference<>()) );

    bp::class_< CvModuleInfo >( "CvModuleInfo" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvModuleInfo >() )    
        .add_property( "next", bp::make_function(&::get_CvModuleInfo_next, bp::return_internal_reference<>()) )    
        .add_property( "func_tab", bp::make_function(&::get_CvModuleInfo_func_tab, bp::return_internal_reference<>()) )    
        .add_property( "name", &::get_CvModuleInfo_name )    
        .add_property( "version", &::get_CvModuleInfo_version );

    bp::class_< CvPluginFuncInfo_wrapper >( "CvPluginFuncInfo" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvPluginFuncInfo >() )    
        .add_property( "default_func_addr"
                    , pyplus_conv::make_addressof_getter(&CvPluginFuncInfo::default_func_addr)
                    , pyplus_conv::make_address_setter(&CvPluginFuncInfo::default_func_addr) )    
        .add_property( "func_addr"
                    , pyplus_conv::make_addressof_getter(&CvPluginFuncInfo::func_addr)
                    , pyplus_conv::make_address_setter(&CvPluginFuncInfo::func_addr) )    
        .def_readwrite( "loaded_from", &CvPluginFuncInfo::loaded_from )    
        .def_readwrite( "search_modules", &CvPluginFuncInfo::search_modules )    
        .add_property( "func_names", &::get_CvPluginFuncInfo_func_names );

    bp::class_< CvPoint >( "CvPoint", "\n2D point with integer coordinates (usually zero-based)."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point2i instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvPoint >(), "\n2D point with integer coordinates (usually zero-based)."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point2i instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint" )    
        .def_readwrite( "x", &CvPoint::x )    
        .def_readwrite( "y", &CvPoint::y );

    bp::class_< CvPoint2D32f >( "CvPoint2D32f", "\n2D point with floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point2f instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint2d32f" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvPoint2D32f >(), "\n2D point with floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point2f instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint2d32f" )    
        .def_readwrite( "x", &CvPoint2D32f::x )    
        .def_readwrite( "y", &CvPoint2D32f::y );

    bp::class_< CvPoint2D64f >( "CvPoint2D64f", "\n2D point with double precision floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point2d instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint2d64f" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvPoint2D64f >(), "\n2D point with double precision floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point2d instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint2d64f" )    
        .def_readwrite( "x", &CvPoint2D64f::x )    
        .def_readwrite( "y", &CvPoint2D64f::y );

    bp::class_< CvPoint3D32f >( "CvPoint3D32f", "\n3D point with floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point3f instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint3d32f" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvPoint3D32f >(), "\n3D point with floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point3f instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint3d32f" )    
        .def_readwrite( "x", &CvPoint3D32f::x )    
        .def_readwrite( "y", &CvPoint3D32f::y )    
        .def_readwrite( "z", &CvPoint3D32f::z );

    bp::class_< CvPoint3D64f >( "CvPoint3D64f", "\n3D point with double precision floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point3d instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint3d64f" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvPoint3D64f >(), "\n3D point with double precision floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point3d instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint3d64f" )    
        .def_readwrite( "x", &CvPoint3D64f::x )    
        .def_readwrite( "y", &CvPoint3D64f::y )    
        .def_readwrite( "z", &CvPoint3D64f::z );

    bp::class_< CvSeq >( "CvSeq" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvSeq >() )    
        .def_readwrite( "delta_elems", &CvSeq::delta_elems )    
        .def_readwrite( "elem_size", &CvSeq::elem_size )    
        .def_readwrite( "flags", &CvSeq::flags )    
        .def_readwrite( "header_size", &CvSeq::header_size )    
        .def_readwrite( "total", &CvSeq::total )    
        .add_property( "h_prev", bp::make_function(&::get_CvSeq_h_prev, bp::return_internal_reference<>()) )    
        .add_property( "h_next", bp::make_function(&::get_CvSeq_h_next, bp::return_internal_reference<>()) )    
        .add_property( "v_prev", bp::make_function(&::get_CvSeq_v_prev, bp::return_internal_reference<>()) )    
        .add_property( "v_next", bp::make_function(&::get_CvSeq_v_next, bp::return_internal_reference<>()) )    
        .add_property( "free_blocks", bp::make_function(&::get_CvSeq_free_blocks, bp::return_internal_reference<>()) )    
        .add_property( "first", bp::make_function(&::get_CvSeq_first, bp::return_internal_reference<>()) )    
        .add_property( "block_max", &::get_CvSeq_block_max )    
        .add_property( "ptr", &::get_CvSeq_ptr )    
        .add_property( "storage", bp::make_function(&::get_CvSeq_storage, bp::with_custodian_and_ward_postcall<0, 1>()) );

    bp::class_< CvSeqBlock >( "CvSeqBlock" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvSeqBlock >() )    
        .def_readwrite( "count", &CvSeqBlock::count )    
        .def_readwrite( "start_index", &CvSeqBlock::start_index )    
        .add_property( "prev", bp::make_function(&::get_CvSeqBlock_prev, bp::return_internal_reference<>()) )    
        .add_property( "next", bp::make_function(&::get_CvSeqBlock_next, bp::return_internal_reference<>()) )    
        .add_property( "data", &::get_CvSeqBlock_data );

    bp::class_< CvSet >( "CvSet" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvSet >() )    
        .def_readwrite( "active_count", &CvSet::active_count )    
        .def_readwrite( "delta_elems", &CvSet::delta_elems )    
        .def_readwrite( "elem_size", &CvSet::elem_size )    
        .def_readwrite( "flags", &CvSet::flags )    
        .def_readwrite( "header_size", &CvSet::header_size )    
        .def_readwrite( "total", &CvSet::total )    
        .add_property( "h_prev", bp::make_function(&::get_CvSet_h_prev, bp::return_internal_reference<>()) )    
        .add_property( "h_next", bp::make_function(&::get_CvSet_h_next, bp::return_internal_reference<>()) )    
        .add_property( "v_prev", bp::make_function(&::get_CvSet_v_prev, bp::return_internal_reference<>()) )    
        .add_property( "v_next", bp::make_function(&::get_CvSet_v_next, bp::return_internal_reference<>()) )    
        .add_property( "free_blocks", bp::make_function(&::get_CvSet_free_blocks, bp::return_internal_reference<>()) )    
        .add_property( "first", bp::make_function(&::get_CvSet_first, bp::return_internal_reference<>()) )    
        .add_property( "block_max", &::get_CvSet_block_max )    
        .add_property( "ptr", &::get_CvSet_ptr )    
        .add_property( "free_elems", bp::make_function(&::get_CvSet_free_elems, bp::return_internal_reference<>()) )    
        .add_property( "storage", bp::make_function(&::get_CvSet_storage, bp::with_custodian_and_ward_postcall<0, 1>()) );

    bp::class_< CvSetElem >( "CvSetElem" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvSetElem >() )    
        .def_readwrite( "flags", &CvSetElem::flags )    
        .add_property( "next_free", bp::make_function(&::get_CvSetElem_next_free, bp::return_internal_reference<>()) );

    bp::class_< CvString_wrapper >( "CvString" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvString >() )    
        .add_property( "data", bp::make_function(&CvString_wrapper::get_data) );

    bp::class_< CvStringHashNode >( "CvStringHashNode" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvStringHashNode >() )    
        .def_readwrite( "hashval", &CvStringHashNode::hashval )    
        .def_readwrite( "str", &CvStringHashNode::str )    
        .add_property( "next", bp::make_function(&::get_CvStringHashNode_next, bp::return_internal_reference<>()) );

    bp::class_< CvTypeInfo >( "CvTypeInfo" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvTypeInfo >() )    
        .def_readwrite( "flags", &CvTypeInfo::flags )    
        .def_readwrite( "header_size", &CvTypeInfo::header_size )    
        .add_property( "prev", bp::make_function(&::get_CvTypeInfo_prev, bp::return_internal_reference<>()) )    
        .add_property( "next", bp::make_function(&::get_CvTypeInfo_next, bp::return_internal_reference<>()) )    
        .add_property( "type_name", &::get_CvTypeInfo_type_name );

    { //::cv::Ptr< CvMemStorage >
        typedef bp::class_< cv::Ptr< CvMemStorage > > MemStorage_exposer_t;
        MemStorage_exposer_t MemStorage_exposer = MemStorage_exposer_t( "MemStorage", bp::init< >() );
        bp::scope MemStorage_scope( MemStorage_exposer );
        MemStorage_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Ptr< CvMemStorage > >() );
        { //::cv::Ptr< CvMemStorage >::addref
        
            typedef cv::Ptr< CvMemStorage > exported_class_t;
            typedef void ( exported_class_t::*addref_function_type )(  ) ;
            
            MemStorage_exposer.def( 
                "addref"
                , addref_function_type( &::cv::Ptr< CvMemStorage >::addref ) );
        
        }
        { //::cv::Ptr< CvMemStorage >::delete_obj
        
            typedef cv::Ptr< CvMemStorage > exported_class_t;
            typedef void ( exported_class_t::*delete_obj_function_type )(  ) ;
            
            MemStorage_exposer.def( 
                "delete_obj"
                , delete_obj_function_type( &::cv::Ptr< CvMemStorage >::delete_obj ) );
        
        }
        { //::cv::Ptr< CvMemStorage >::empty
        
            typedef cv::Ptr< CvMemStorage > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            MemStorage_exposer.def( 
                "empty"
                , empty_function_type( &::cv::Ptr< CvMemStorage >::empty ) );
        
        }
        { //::cv::Ptr< CvMemStorage >::release
        
            typedef cv::Ptr< CvMemStorage > exported_class_t;
            typedef void ( exported_class_t::*release_function_type )(  ) ;
            
            MemStorage_exposer.def( 
                "release"
                , release_function_type( &::cv::Ptr< CvMemStorage >::release ) );
        
        }
        MemStorage_exposer.def("fromCvMemStorage", &::MemStorage_from_CvMemStorage, (bp::arg("inst_CvMemStorage")));
        MemStorage_exposer.staticmethod("fromCvMemStorage");
        MemStorage_exposer.add_property("pointee", bp::make_function(&::MemStorage_pointee, bp::return_internal_reference<>()));
    }

    { //::cxtypes_h_dummy_struct
        typedef bp::class_< cxtypes_h_dummy_struct > __cxtypes_h_dummy_struct_exposer_t;
        __cxtypes_h_dummy_struct_exposer_t __cxtypes_h_dummy_struct_exposer = __cxtypes_h_dummy_struct_exposer_t( "__cxtypes_h_dummy_struct" );
        bp::scope __cxtypes_h_dummy_struct_scope( __cxtypes_h_dummy_struct_exposer );
        __cxtypes_h_dummy_struct_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cxtypes_h_dummy_struct >() );
        bp::class_< cxtypes_h_dummy_struct::dummy_struct2 >( "dummy_struct2" )    
            .add_property( "this", pyplus_conv::make_addressof_inst_getter< cxtypes_h_dummy_struct::dummy_struct2 >() );
        __cxtypes_h_dummy_struct_exposer.setattr("v0", 0);
    }
    {;
    }

}
