// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "stl_wrapper.hpp"
#include "opencv_converters.hpp"
#include "sequence.hpp"
#include "ndarray.hpp"
#include "__stl_dummy_struct.pypp.hpp"

namespace bp = boost::python;

void register___stl_dummy_struct_class(){

    { //::stl_dummy_struct
        typedef bp::class_< stl_dummy_struct > __stl_dummy_struct_exposer_t;
        __stl_dummy_struct_exposer_t __stl_dummy_struct_exposer = __stl_dummy_struct_exposer_t( "__stl_dummy_struct" );
        bp::scope __stl_dummy_struct_scope( __stl_dummy_struct_exposer );
        __stl_dummy_struct_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< stl_dummy_struct >() );
        bp::class_< stl_dummy_struct::dummy_struct2 >( "dummy_struct2" )    
            .add_property( "this", pyplus_conv::make_addressof_inst_getter< stl_dummy_struct::dummy_struct2 >() );
        __stl_dummy_struct_exposer.setattr("v0", 0);
    }
    {
        
        sdcpp::register_sdobject<sdcpp::sequence>();
        bp::def("asndarray", &sdcpp::vector_to_ndarray2< unsigned long >, (bp::arg("inst_vector_ulong")) );
        bp::def("asvector_ulong", &sdcpp::ndarray_to_vector2< unsigned long >, (bp::arg("inst_ndarray")) );
        bp::def("asndarray", &sdcpp::vector_to_ndarray2< short >, (bp::arg("inst_vector_int16")) );
        bp::def("asvector_int16", &sdcpp::ndarray_to_vector2< short >, (bp::arg("inst_ndarray")) );
        bp::def("asndarray", &sdcpp::vector_to_ndarray2< float >, (bp::arg("inst_vector_float32")) );
        bp::def("asvector_float32", &sdcpp::ndarray_to_vector2< float >, (bp::arg("inst_ndarray")) );
        bp::def("asndarray", &sdcpp::vector_to_ndarray2< char >, (bp::arg("inst_vector_int8")) );
        bp::def("asvector_int8", &sdcpp::ndarray_to_vector2< char >, (bp::arg("inst_ndarray")) );
        bp::def("asndarray", &sdcpp::vector_to_ndarray2< unsigned char >, (bp::arg("inst_vector_uint8")) );
        bp::def("asvector_uint8", &sdcpp::ndarray_to_vector2< unsigned char >, (bp::arg("inst_ndarray")) );
        bp::def("asndarray", &sdcpp::vector_to_ndarray2< int >, (bp::arg("inst_vector_int")) );
        bp::def("asvector_int", &sdcpp::ndarray_to_vector2< int >, (bp::arg("inst_ndarray")) );
        bp::def("asndarray", &sdcpp::vector_to_ndarray2< unsigned short >, (bp::arg("inst_vector_uint16")) );
        bp::def("asvector_uint16", &sdcpp::ndarray_to_vector2< unsigned short >, (bp::arg("inst_ndarray")) );
        bp::def("asndarray", &sdcpp::vector_to_ndarray2< unsigned int >, (bp::arg("inst_vector_uint")) );
        bp::def("asvector_uint", &sdcpp::ndarray_to_vector2< unsigned int >, (bp::arg("inst_ndarray")) );
        bp::def("asndarray", &sdcpp::vector_to_ndarray2< double >, (bp::arg("inst_vector_float64")) );
        bp::def("asvector_float64", &sdcpp::ndarray_to_vector2< double >, (bp::arg("inst_ndarray")) );
        bp::def("asndarray", &sdcpp::vector_to_ndarray2< long >, (bp::arg("inst_vector_long")) );
        bp::def("asvector_long", &sdcpp::ndarray_to_vector2< long >, (bp::arg("inst_ndarray")) );;
    }

}
