// This file has been generated by Py++.

#include "boost/python.hpp"
#include "with_ownershiplevel_postcall.hpp"
#include "cvaux_wrapper.hpp"
#include "cvaux_ext_free_functions.pypp.hpp"

namespace bp = boost::python;

void register_free_functions(){

    { //::cvBlob
    
        typedef ::CvBlob ( *blob_function_type )( float,float,float,float );
        
        bp::def( 
            "blob"
            , blob_function_type( &::cvBlob )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("w"), bp::arg("h") )
            , "\nWrapped function:"
    "\n    cvBlob" );
    
    }

    { //::cvConDensUpdateByTime
    
        typedef void ( *conDensUpdateByTime_function_type )( ::CvConDensation * );
        
        bp::def( 
            "conDensUpdateByTime"
            , conDensUpdateByTime_function_type( &::cvConDensUpdateByTime )
            , ( bp::arg("condens") )
            , "\nWrapped function:"
    "\n    cvConDensUpdateByTime" );
    
    }

    { //::cvCreateBlobDetectorCC
    
        typedef ::CvBlobDetector * ( *createBlobDetectorCC_function_type )(  );
        
        bp::def( 
            "createBlobDetectorCC"
            , createBlobDetectorCC_function_type( &::cvCreateBlobDetectorCC )
            , bp::with_ownershiplevel_postcall< 1, bp::return_value_policy< bp::reference_existing_object > >()
            , "\nWrapped function:"
    "\n    cvCreateBlobDetectorCC" );
    
    }

    { //::cvCreateBlobDetectorSimple
    
        typedef ::CvBlobDetector * ( *createBlobDetectorSimple_function_type )(  );
        
        bp::def( 
            "createBlobDetectorSimple"
            , createBlobDetectorSimple_function_type( &::cvCreateBlobDetectorSimple )
            , bp::with_ownershiplevel_postcall< 1, bp::return_value_policy< bp::reference_existing_object > >()
            , "\nWrapped function:"
    "\n    cvCreateBlobDetectorSimple" );
    
    }

    { //::cvCreateConDensation
    
        typedef ::CvConDensation * ( *createConDensation_function_type )( int,int,int );
        
        bp::def( 
            "createConDensation"
            , createConDensation_function_type( &::cvCreateConDensation )
            , ( bp::arg("dynam_params"), bp::arg("measure_params"), bp::arg("sample_count") )
            , bp::with_ownershiplevel_postcall< 1, bp::return_value_policy< bp::reference_existing_object > >()
            , "\nWrapped function:"
    "\n    cvCreateConDensation" );
    
    }

    { //::cvDetectedBlob
    
        typedef ::CvDetectedBlob ( *detectedBlob_function_type )( float,float,float,float,int,float );
        
        bp::def( 
            "detectedBlob"
            , detectedBlob_function_type( &::cvDetectedBlob )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("w"), bp::arg("h"), bp::arg("ID")=(int)(0), bp::arg("response")=0.0f )
            , "\nWrapped function:"
    "\n    cvDetectedBlob" );
    
    }

    { //::cv::find4QuadCornerSubpix
    
        typedef bool ( *find4QuadCornerSubpix_function_type )( ::cv::Mat const &,::std::vector< cv::Point_<float> > &,::cv::Size );
        
        bp::def( 
            "find4QuadCornerSubpix"
            , find4QuadCornerSubpix_function_type( &::cv::find4QuadCornerSubpix )
            , ( bp::arg("img"), bp::arg("corners"), bp::arg("region_size") ) );
    
    }

}
