// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "opencv_converters.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "cvaux_wrapper.hpp"
#include "boost/python/object.hpp"
#include "boost/python/str.hpp"
#include "cvaux_ext_classes_3.pypp.hpp"

namespace bp = boost::python;

static CvDefParam * get_CvDefParam_next( CvDefParam const & inst ) { return inst.next; }

static bp::object get_CvDefParam_pName( CvDefParam const & inst ){        
    return inst.pName? bp::str(inst.pName): bp::object();
}

static bp::object get_CvDefParam_pComment( CvDefParam const & inst ){        
    return inst.pComment? bp::str(inst.pComment): bp::object();
}

static bp::object get_CvDefParam_Str( CvDefParam const & inst ){        
    return inst.Str? bp::str(inst.Str): bp::object();
}

static void Detect_d8fa7b620f024b1a2f20fc4afa978e15( ::CvObjectDetector & inst, ::cv::Mat & arg0, ::CvBlobSeq * arg1=0 ){
    inst.Detect(get_CvMat_ptr(arg0), arg1);
}

void register_classes_3(){

    bp::class_< CvDefParam >( "CvDefParam" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvDefParam >() )    
        .def_readwrite( "Double", &CvDefParam::Double )    
        .def_readwrite( "Float", &CvDefParam::Float )    
        .def_readwrite( "Int", &CvDefParam::Int )    
        .add_property( "next", bp::make_function(&::get_CvDefParam_next, bp::return_internal_reference<>()) )    
        .add_property( "pName", &::get_CvDefParam_pName )    
        .add_property( "pComment", &::get_CvDefParam_pComment )    
        .add_property( "Str", &::get_CvDefParam_Str );

    bp::class_< CvDetectedBlob, bp::bases< CvBlob > >( "CvDetectedBlob" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvDetectedBlob >() )    
        .def_readwrite( "response", &CvDetectedBlob::response );

    bp::class_< CvFuzzyController >( "CvFuzzyController" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvFuzzyController >() );

    bp::class_< CvFuzzyCurve >( "CvFuzzyCurve", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvFuzzyCurve >() )    
        .def( 
            "addPoint"
            , (void ( CvFuzzyCurve::* )( double,double ) )( &::CvFuzzyCurve::addPoint )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "calcValue"
            , (double ( CvFuzzyCurve::* )( double ) )( &::CvFuzzyCurve::calcValue )
            , ( bp::arg("param") ) )    
        .def( 
            "clear"
            , (void ( CvFuzzyCurve::* )(  ) )( &::CvFuzzyCurve::clear ) )    
        .def( 
            "getCentre"
            , (double ( CvFuzzyCurve::* )(  ) )( &::CvFuzzyCurve::getCentre ) )    
        .def( 
            "getValue"
            , (double ( CvFuzzyCurve::* )(  ) )( &::CvFuzzyCurve::getValue ) )    
        .def( 
            "setCentre"
            , (void ( CvFuzzyCurve::* )( double ) )( &::CvFuzzyCurve::setCentre )
            , ( bp::arg("_centre") ) )    
        .def( 
            "setValue"
            , (void ( CvFuzzyCurve::* )( double ) )( &::CvFuzzyCurve::setValue )
            , ( bp::arg("_value") ) );

    bp::class_< CvFuzzyFunction >( "CvFuzzyFunction" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvFuzzyFunction >() );

    bp::class_< CvFuzzyMeanShiftTracker >( "CvFuzzyMeanShiftTracker" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvFuzzyMeanShiftTracker >() );

    bp::class_< CvFuzzyPoint >( "CvFuzzyPoint", bp::init< double, double >(( bp::arg("_x"), bp::arg("_y") )) )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvFuzzyPoint >() )    
        .def_readwrite( "value", &CvFuzzyPoint::value )    
        .def_readwrite( "x", &CvFuzzyPoint::x )    
        .def_readwrite( "y", &CvFuzzyPoint::y );

    bp::class_< CvFuzzyRule >( "CvFuzzyRule" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvFuzzyRule >() );

    { //::CvObjectDetector
        typedef bp::class_< CvObjectDetector > CvObjectDetector_exposer_t;
        CvObjectDetector_exposer_t CvObjectDetector_exposer = CvObjectDetector_exposer_t( "CvObjectDetector", bp::init< bp::optional< char const * > >(( bp::arg("arg0")=bp::object() )) );
        bp::scope CvObjectDetector_scope( CvObjectDetector_exposer );
        CvObjectDetector_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< CvObjectDetector >() );
        bp::implicitly_convertible< char const *, CvObjectDetector >();
        { //::CvObjectDetector::Detect
        
            typedef void ( *Detect_function_type )( CvObjectDetector &,::cv::Mat &,CvBlobSeq * );
            
            CvObjectDetector_exposer.def( 
                "Detect"
                , Detect_function_type( &Detect_d8fa7b620f024b1a2f20fc4afa978e15 )
                , ( bp::arg("inst"), bp::arg("arg0"), bp::arg("arg1")=bp::object() )
                , "\nArgument 'arg0':"\
    "\n    C++ type: ::CvArr const *"\
    "\n    Python type: Mat" );
        
        }
        { //::CvObjectDetector::GetMaxBorderSize
        
            typedef int ( ::CvObjectDetector::*GetMaxBorderSize_function_type )(  ) const;
            
            CvObjectDetector_exposer.def( 
                "GetMaxBorderSize"
                , GetMaxBorderSize_function_type( &::CvObjectDetector::GetMaxBorderSize ) );
        
        }
        { //::CvObjectDetector::GetMinWindowSize
        
            typedef ::CvSize ( ::CvObjectDetector::*GetMinWindowSize_function_type )(  ) const;
            
            CvObjectDetector_exposer.def( 
                "GetMinWindowSize"
                , GetMinWindowSize_function_type( &::CvObjectDetector::GetMinWindowSize ) );
        
        }
        { //::CvObjectDetector::Load
        
            typedef bool ( ::CvObjectDetector::*Load_function_type )( char const * ) ;
            
            CvObjectDetector_exposer.def( 
                "Load"
                , Load_function_type( &::CvObjectDetector::Load )
                , ( bp::arg("arg0")=bp::object() ) );
        
        }
    }

}
