// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "boost/python/object/life_support.hpp"
#include "Seq_CvSURFPoint.pypp.hpp"

namespace bp = boost::python;

static bp::object from_MemStorage(bp::object const &inst_MemStorage, int headerSize)
{
    bp::extract<cv::MemStorage &> elem(inst_MemStorage);
    if(!elem.check())
    {
        char s[300];
        sprintf( s, "Argument 'inst_MemStorage' must contain an object of type MemStorage." );
        PyErr_SetString(PyExc_TypeError, s);        
        throw bp::error_already_set();
    }
    
    bp::object result = bp::object(cv::Seq<CvSURFPoint>(elem(), headerSize));
    bp::objects::make_nurse_and_patient(result.ptr(), inst_MemStorage.ptr());
    return result;
}

static size_t len(cv::Seq<CvSURFPoint> const &inst) { return inst.size(); }

void register_Seq_CvSURFPoint_class(){

    bp::class_< cv::Seq< CvSURFPoint > >( "Seq_CvSURFPoint", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Seq< CvSURFPoint > >() )    
        .def( 
            "channels"
            , (int ( ::cv::Seq<CvSURFPoint>::* )(  ) const)( &::cv::Seq< CvSURFPoint >::channels ) )    
        .def( 
            "clear"
            , (void ( ::cv::Seq<CvSURFPoint>::* )(  ) )( &::cv::Seq< CvSURFPoint >::clear ) )    
        .def( 
            "depth"
            , (int ( ::cv::Seq<CvSURFPoint>::* )(  ) const)( &::cv::Seq< CvSURFPoint >::depth ) )    
        .def( 
            "elemSize"
            , (::size_t ( ::cv::Seq<CvSURFPoint>::* )(  ) const)( &::cv::Seq< CvSURFPoint >::elemSize ) )    
        .def( 
            "empty"
            , (bool ( ::cv::Seq<CvSURFPoint>::* )(  ) const)( &::cv::Seq< CvSURFPoint >::empty ) )    
        .def( 
            "index"
            , (::size_t ( ::cv::Seq<CvSURFPoint>::* )( ::CvSURFPoint const & ) const)( &::cv::Seq< CvSURFPoint >::index )
            , ( bp::arg("elem") ) )    
        .def( 
            "insert"
            , (void ( ::cv::Seq<CvSURFPoint>::* )( int,::CvSURFPoint const & ) )( &::cv::Seq< CvSURFPoint >::insert )
            , ( bp::arg("idx"), bp::arg("elem") ) )    
        .def( 
            "__getitem__"
            , (::CvSURFPoint & ( ::cv::Seq<CvSURFPoint>::* )( int ) )( &::cv::Seq< CvSURFPoint >::operator[] )
            , ( bp::arg("idx") )
            , bp::return_internal_reference< >()
            , "\nWrapped function:"
    "\n    operator[]" )    
        .def( 
            "__getitem__"
            , (::CvSURFPoint const & ( ::cv::Seq<CvSURFPoint>::* )( int ) const)( &::cv::Seq< CvSURFPoint >::operator[] )
            , ( bp::arg("idx") )
            , bp::return_value_policy< bp::copy_const_reference >()
            , "\nWrapped function:"
    "\n    operator[]" )    
        .def( 
            "pop_back"
            , (void ( ::cv::Seq<CvSURFPoint>::* )(  ) )( &::cv::Seq< CvSURFPoint >::pop_back ) )    
        .def( 
            "pop_front"
            , (void ( ::cv::Seq<CvSURFPoint>::* )(  ) )( &::cv::Seq< CvSURFPoint >::pop_front ) )    
        .def( 
            "push_back"
            , (void ( ::cv::Seq<CvSURFPoint>::* )( ::CvSURFPoint const & ) )( &::cv::Seq< CvSURFPoint >::push_back )
            , ( bp::arg("elem") ) )    
        .def( 
            "push_front"
            , (void ( ::cv::Seq<CvSURFPoint>::* )( ::CvSURFPoint const & ) )( &::cv::Seq< CvSURFPoint >::push_front )
            , ( bp::arg("elem") ) )    
        .def( 
            "remove"
            , (void ( ::cv::Seq<CvSURFPoint>::* )( int ) )( &::cv::Seq< CvSURFPoint >::remove )
            , ( bp::arg("idx") ) )    
        .def( 
            "remove"
            , (void ( ::cv::Seq<CvSURFPoint>::* )( ::cv::Range const & ) )( &::cv::Seq< CvSURFPoint >::remove )
            , ( bp::arg("r") ) )    
        .def( 
            "size"
            , (::size_t ( ::cv::Seq<CvSURFPoint>::* )(  ) const)( &::cv::Seq< CvSURFPoint >::size ) )    
        .def( 
            "type"
            , (int ( ::cv::Seq<CvSURFPoint>::* )(  ) const)( &::cv::Seq< CvSURFPoint >::type ) )    
        .def("fromMemStorage", &::from_MemStorage, (bp::arg("inst_MemStorage"), bp::arg("headerSize")=bp::object(sizeof(CvSeq))))    
        .staticmethod("fromMemStorage")    
        .def("__len__", &::len);

}
