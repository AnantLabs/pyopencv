// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "opencv_converters.hpp"
#include "SURF.pypp.hpp"

namespace bp = boost::python;

static void call1( ::cv::SURF const & inst, ::cv::Mat const & img, ::cv::Mat const & mask, bp::list & keypoints ){
    std::vector<cv::KeyPoint, std::allocator<cv::KeyPoint> > keypoints2;
    convert_from_object_to_T(keypoints, keypoints2);
    inst(img, mask, keypoints2);
    convert_from_T_to_object(keypoints2, keypoints);
}

static void call2( ::cv::SURF const & inst, ::cv::Mat const & img, ::cv::Mat const & mask, bp::list & keypoints, cv::Mat & descriptors, bool useProvidedKeypoints=false ){
    std::vector<cv::KeyPoint, std::allocator<cv::KeyPoint> > keypoints2;
    std::vector<float, std::allocator<float> > descriptors2;
    convert_from_object_to_T(keypoints, keypoints2);
    convert_from_Mat_to_vector_of_T(descriptors, descriptors2);
    inst(img, mask, keypoints2, descriptors2, useProvidedKeypoints);
    convert_from_T_to_object(keypoints2, keypoints);
    convert_from_vector_of_T_to_Mat(descriptors2, descriptors);
}

void register_SURF_class(){

    { //::cv::SURF
        typedef bp::class_< cv::SURF, bp::bases< CvSURFParams > > SURF_exposer_t;
        SURF_exposer_t SURF_exposer = SURF_exposer_t( "SURF", bp::init< >() );
        bp::scope SURF_scope( SURF_exposer );
        SURF_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::SURF >() );
        SURF_exposer.def( bp::init< double, bp::optional< int, int, bool > >(( bp::arg("_hessianThreshold"), bp::arg("_nOctaves")=(int)(4), bp::arg("_nOctaveLayers")=(int)(2), bp::arg("_extended")=(bool)(false) )) );
        bp::implicitly_convertible< double, cv::SURF >();
        { //::cv::SURF::descriptorSize
        
            typedef int ( ::cv::SURF::*descriptorSize_function_type )(  ) const;
            
            SURF_exposer.def( 
                "descriptorSize"
                , descriptorSize_function_type( &::cv::SURF::descriptorSize ) );
        
        }
        SURF_exposer.def( 
            "__call__"
            , (void (*)( ::cv::SURF const &,::cv::Mat const &,::cv::Mat const &,bp::list & ))( &call1 )
            , ( bp::arg("inst"), bp::arg("img"), bp::arg("mask"), bp::arg("keypoints") ) );
        SURF_exposer.def( 
            "__call__"
            , (void (*)( ::cv::SURF const &,::cv::Mat const &,::cv::Mat const &,bp::list &,cv::Mat &,bool ))( &call2 )
            , ( bp::arg("inst"), bp::arg("img"), bp::arg("mask"), bp::arg("keypoints"), bp::arg("descriptors"), bp::arg("useProvidedKeypoints")=(bool)(false) ) );
    }

}
