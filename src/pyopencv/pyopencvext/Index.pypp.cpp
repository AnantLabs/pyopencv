// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "opencv_converters.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "Index.pypp.hpp"

namespace bp = boost::python;

static boost::python::tuple knnSearch_b27556db8034853ef4327f12b2570dc5( ::cv::flann::Index & inst, bp::sequence queries, int knn, ::cv::flann::SearchParams const & params ){
    bp::sequence indices2;
    std::vector<int, std::allocator<int> > indices3;
    bp::sequence dists2;
    std::vector<float, std::allocator<float> > dists3;
    std::vector<float, std::allocator<float> > queries2;
    convert_seq_to_vector(queries, queries2);
    inst.knnSearch(queries2, indices3, dists3, knn, params);
    indices2 = convert_vector_to_seq(indices3);
    dists2 = convert_vector_to_seq(dists3);
    return bp::make_tuple( indices2, dists2 );
}

static boost::python::tuple radiusSearch_9595058c6922b247b15bed6a4e25038c( ::cv::flann::Index & inst, bp::sequence query, float radius, ::cv::flann::SearchParams const & params ){
    bp::sequence indices2;
    std::vector<int, std::allocator<int> > indices3;
    bp::sequence dists2;
    std::vector<float, std::allocator<float> > dists3;
    std::vector<float, std::allocator<float> > query2;
    convert_seq_to_vector(query, query2);
    int result = inst.radiusSearch(query2, indices3, dists3, radius, params);
    indices2 = convert_vector_to_seq(indices3);
    dists2 = convert_vector_to_seq(dists3);
    return bp::make_tuple( result, indices2, dists2 );
}

void register_Index_class(){

    bp::class_< cv::flann::Index >( "Index", bp::init< cv::Mat const &, cv::flann::IndexParams const & >(( bp::arg("features"), bp::arg("params") )) )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::flann::Index >() )    
        .def( 
            "knnSearch"
            , (boost::python::tuple (*)( ::cv::flann::Index &,bp::sequence,int,::cv::flann::SearchParams const & ))( &knnSearch_b27556db8034853ef4327f12b2570dc5 )
            , ( bp::arg("inst"), bp::arg("queries"), bp::arg("knn"), bp::arg("params") ) )    
        .def( 
            "knnSearch"
            , (void ( ::cv::flann::Index::* )( ::cv::Mat const &,::cv::Mat &,::cv::Mat &,int,::cv::flann::SearchParams const & ) )( &::cv::flann::Index::knnSearch )
            , ( bp::arg("queries"), bp::arg("indices"), bp::arg("dists"), bp::arg("knn"), bp::arg("params") ) )    
        .def( 
            "radiusSearch"
            , (boost::python::tuple (*)( ::cv::flann::Index &,bp::sequence,float,::cv::flann::SearchParams const & ))( &radiusSearch_9595058c6922b247b15bed6a4e25038c )
            , ( bp::arg("inst"), bp::arg("query"), bp::arg("radius"), bp::arg("params") ) )    
        .def( 
            "radiusSearch"
            , (int ( ::cv::flann::Index::* )( ::cv::Mat const &,::cv::Mat &,::cv::Mat &,float,::cv::flann::SearchParams const & ) )( &::cv::flann::Index::radiusSearch )
            , ( bp::arg("query"), bp::arg("indices"), bp::arg("dists"), bp::arg("radius"), bp::arg("params") ) )    
        .def( 
            "save"
            , (void ( ::cv::flann::Index::* )( ::std::string ) )( &::cv::flann::Index::save )
            , ( bp::arg("filename") ) )    
        .def( 
            "size"
            , (int ( ::cv::flann::Index::* )(  ) const)( &::cv::flann::Index::size ) )    
        .def( 
            "veclen"
            , (int ( ::cv::flann::Index::* )(  ) const)( &::cv::flann::Index::veclen ) );

}
