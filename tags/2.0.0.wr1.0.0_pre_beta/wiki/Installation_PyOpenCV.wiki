#summary Instructions for downloading, configuring, and installing PyOpenCV

==Download PyOpenCV==

Download a PyOpenCV source archive from the [http://code.google.com/p/pyopencv/downloads/list Downloads] page, and extract it. Alternatively, use this command to anonymously check out the latest project source code:
{{{
svn checkout http://pyopencv.googlecode.com/svn/trunk/src/ pyopencv
}}}

===Edit file `config.py`===

PyOpenCV needs to be told where to find OpenCV 2.0 and Boost.Python. It needs to know the libraries to link against and the directories to search for those libraries. Put this text into file `config.py` located at PyOpenCV's source directory (potentially with adapted paths and libraries): 
{{{
# OpenCV 2.0 library
opencv_dir = <opencv_dir> # the root dir of your OpenCV build
opencv_include_dirs = [opencv_dir+"/include/opencv"]
opencv_library_dirs = [opencv_dir+"/lib"]
opencv_libraries = ["cvaux", "ml", "highgui", "cv", "cxcore"]
opencv_runtime_library_dirs = []
opencv_runtime_libraries_to_be_bundled = []

# Boost.Python library
boost_dir = <boost_dir> # the root dir of your Boost source tree
boost_include_dirs = [boost_dir]
boost_library_dirs = []
boost_libraries = []
boost_runtime_library_dirs = []
boost_runtime_libraries_to_be_bundled = []
}}}

This is the configuration file that provides PyOpenCV information about OpenCV and Boost libraries installed on your platform. The file is a Python sript so the user can freely program to generate the required information automatically or manually.

Eventually, the file should have the following variables (each of which is a list/tuple of strings) exposed:

 * `opencv_include_dirs` == list of folders that contain OpenCV's include header files
 * `opencv_library_dirs` == list of folders that contain OpenCV's library files to be linked against (e.g. a folder containing files like cv200.lib, libcv200.a, libcv200.so, or libcv200.dylib)
 * `opencv_libraries` == list of library files that are to be linked against. 
 * *Windows only:* `opencv_runtime_library_dirs` == list of folders that contain OpenCV's shared library files that are actually loaded at run-time (e.g. cv200.dll)
 * *Windows only:* `opencv_runtime_libraries_to_be_bundled` == list of shared library files that are actually loaded at run-time. If this variable is an empty list (i.e. `[]`), all the folders specified in the 'opencv_runtime_library_dirs' variable are inserted at the front of the PATH environment whenever PyOpenCV is imported. Otherwise, these shared library files are bundled with PyOpenCV at install-time.

 * `boost_include_dirs` == list of folders that contain Boost's include header files. The first item of the list must be the root path of Boost.
 * `boost_library_dirs` == list of folders that contain Boost.Python's library files to be linked against (e.g. a folder containing files like libboostpython.a or boost_python-mgw44-mt.lib). This variable is ignored if bjam is used as the compiler.
 * `boost_libraries` == list of library files that are to be linked against. This variable is ignored if bjam is used as the compiler.
 * *Windows only:* `boost_runtime_library_dirs` == list of folders that contain Boost.Python's shared library files that are actually loaded at run-time (e.g. boost_python-mgw44-mt-1_40.dll). This variable is ignored if bjam is used as the compiler.
 * *Windows only:* `boost_runtime_libraries_to_be_bundled` == list of shared library files that are actually loaded at run-time. If this variable is an empty list (i.e. `[]`), all the folders specified in the 'boost_runtime_library_dirs' variable are inserted at the front of the PATH environment whenever PyOpenCV is imported. Otherwise, these shared library files are bundled with PyOpenCV at install-time. This variable is ignored if bjam is used as the compiler.

Here are some examples of `config.py`:

  * *On Windows:*

{{{
# OpenCV 2.0 library
opencv_dir = "C:/Program Files/OpenCV"
opencv_include_dirs = [opencv_dir+"/include/opencv"]
opencv_library_dirs = [opencv_dir+"/lib"]
opencv_libraries = ["cvaux200.dll", "ml200.dll", "highgui200.dll", "cv200.dll", "cxcore200.dll"]
opencv_runtime_library_dirs = [opencv_dir+"/bin"]
opencv_runtime_libraries_to_be_bundled = []

# Boost.Python library
boost_dir = "C:/boost_1_41_0"
boost_include_dirs = [boost_dir]
boost_library_dirs = []
boost_libraries = []
boost_runtime_library_dirs = []
boost_runtime_libraries_to_be_bundled = []
}}}

  * *On Linux:*

{{{
# OpenCV 2.0 library
opencv_dir = "/usr/local"
opencv_include_dirs = [opencv_dir+"/include/opencv"]
opencv_library_dirs = [opencv_dir+"/lib"]
opencv_libraries = ["cvaux200.dll", "ml200.dll", "highgui200.dll", "cv200.dll", "cxcore200.dll"]
opencv_runtime_library_dirs = []
opencv_runtime_libraries_to_be_bundled = []

# Boost.Python library
boost_dir = "/usr/include"
boost_include_dirs = [boost_dir]
boost_library_dirs = []
boost_libraries = []
boost_runtime_library_dirs = []
boost_runtime_libraries_to_be_bundled = []
}}}

==Build and Install PyOpenCV==

Now that you have obtained all the necessary libraries, the remaining steps are straight forward. 

To build PyOpenCV, issue the command
{{{
python setup.py build
}}}
It should invoke bjam (PyOpenCV's default choice) to build a Python extension for PyOpenCV. The whole process of building PyOpenCV should take some time between 10 minutes and 45 minutes. Go grab yourself a cup of coffee, sit back, and take a break.

To install PyOpenCV, issue the command
{{{
python setup.py install
}}}