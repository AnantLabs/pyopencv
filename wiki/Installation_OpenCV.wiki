#summary Instructions for installing OpenCV 2.x so that it is usable by PyOpenCV

==Installing OpenCV 2.x==

Willow Garage's pre-compiled OpenCV 2.x builds are in general not suitable for PyOpenCV. The reasons are mainly due to the use of manually written SSE+SSE2 code (see below) and "parallel mode" STL containers (only for OpenCV 2.0 with OpenMP enabled). It is likely that you require a new OpenCV 2.x build that is compiled from source. Do not worry though, you can still use your current OpenCV 2.x build (if any) in other applications. PyOpenCV always tries to load the build you have specified in the `config.py` file instead of other builds.

You have two options to obtain a usable OpenCV build for PyOpenCV: build OpenCV 2.x from source, or download a pre-compiled build.

===Building OpenCV 2.x from source===

If you have decided to build OpenCV 2.x from source, just use the standard `cmake` approach. However, take note of the followings:
  # You should use GCC 4.x as the default C++ compiler. I have not tested PyOpenCV with other C++ compilers.
  # Uncheck the `BUILD_SWIG_PYTHON_SUPPORT` option:
    This is important. When the SWIG option is set, the majority of new C++ member functions of various classes in the ML component are disabled in OpenCV's header file `ml.h`. PyOpenCV, however, relies on these C++ functions to interface with the classes. Therefore, not using SWIG is a must.
  # Uncheck the `USE_SSE`/`ENABLE_SSE` option:
  # Uncheck the `USE_SSE2`/`ENABLE_SSE2` option:
    When either of these options are enabled, along with SIMP code automatically generated by the compiler, some manually written SIMP code is used. However, with no offence to the Willow Garage people, it appears that the manually written code crashes when being run as part of a Python extension. Therefore, the safest best for now is to uncheck these options. For the record, the C++ wrapping code of PyOpenCV can be built safely with `-msse -msse2 -mfpmath=sse -mtune=generic` flags set. 
  # If you want to enable OpenMP when building OpenCV 2.0:
    Before running `cmake`, edit file `CMakeLists.txt`, search for "-D_GLIBCXX_PARALLEL" and remove it. Basically, when this option is set, experimental "parallel mode" STL containers are used, which are incompatible with the standard "normal mode" STL containers used by Boost.Python and other libraries. Of course, if you could recompile every single library that is connected to OpenCV with option "-D_GLIBCXX_PARALLEL" set, then it would be another matter.
  # *On Windows:* enabling the VideoInput library:
    The `libvideoInput.a` library file provided by Willow Garage was built with the old SJLJ exception handling method. Therefore, you cannot link against it using compilers that use the new DWARF-2 exception handling method like MinGW 4.4.x, unless you rebuild the `libvideoInput.a` file using MinGW. The best bet for compilers using DWARF-2 is not to use VideoInput at all. This can be done by taking the following step:
      # Comment the line containing "#define HAVE_VIDEOINPUT 1" (i.e. near line 101 or 105), in file `src/highgui/_highgui.h`. 
    In contrast, for old compilers using SJLJ like TDM, to have VideoInput included in OpenCV 2.0:
      # Edit file `src/highgui/CMakeLists.txt`
      # At line 199, insert " ole32 oleaut32 uuid" at the end of the list of libraries to be linked against (i.e. after "videoInput strmiids"). The developers have forgotten to insert them.

===Downloading a pre-compiled OpenCV 2.x build===

In some cases, there is a faster and trouble-free way to install OpenCV 2.x that is suitable for PyOpenCV. Just go to the [http://code.google.com/p/pyopencv/downloads/list Downloads] page, download a pre-compiled OpenCV 2.x suitable for your platform, and follow the instructions inside the file to install. I have gone through most of the troubles that could have happened to build them. You do not have to go through the same pain.