#summary General instructions for installing PyOpenCV on Windows.

Right now, only gcc 4.x compilers are supported, which include TDM GCC and MinGW.

=Using MinGW or TDM GCC=

==Install OpenCV 2.0==

Willow Garage's pre-compiled OpenCV 2.0 builds for Windows are not suitable for PyOpenCV. The reasons are mainly due to SSE2 and multi-threading (see explanations below). It is likely that you need to either 1) build OpenCV 2.0 from source, or 2) download one of our pre-compiled OpenCV 2.0 builds on the [http://code.google.com/p/pyopencv/downloads/list Downloads] page. Do not worry though, you can still use your current OpenCV 2.0 build (if any) in other applications. PyOpenCV always tries to load the build you have specified in the 'config.py' file instead of other builds.

  # Multi-threading (implying the use of OpenMP) is always a risky idea to try. Both OpenCV 2.0 and Boost.Python are not fully thread-safe. If you insist on using multi-threading and OpenMP, remember that your system may sometimes *crash*.

===Build OpenCV 2.0 from source===

If you have decided to build OpenCV 2.0 from source, take note of the followings:
  # Edit file CMakeLists.txt, search for "-D_GLIBCXX_PARALLEL" and remove it. Basically, when this option is set, "parallel mode" STL containers are used, which are incompatible with the standard "serialized mode" STL containers used by Boost.Python and other libraries. Of course, if you could recompile every single library that is connected to OpenCV with option "-D_GLIBCXX_PARALLEL" set, then it would be another matter.
    * TDM GCC 4.3.3: include "-lpthread" next to "-lgomp" in the CMakeLists.txt file.
  # When using cmake to build, uncheck USE_SSE and USE_SSE2. Do not use -msse2 or any automatic way to generate code using SSE or SSE2. For some unidentified reasons, invoking functions utilizing SSE and SSE2 code from Python may result in a system crash.
  # Do not use -mtune=pentium3 or above ---> system crashes ---> same reason as in (3).
  # The libvideoInput.a library file provided by Willow Garage was built with the SJLJ exception handling method. Therefore, you cannot link against it using compilers that provide the Dwarf exception handling method like MinGW 4.4.0, unless you could rebuild this file. In addition, to have videoInput included in OpenCV 2.0:
    * Edit file src/highgui/CMakeLists.txt
    * At line 199, insert " ole32 oleaut32 uuid" at the end of the list of libraries to be linked against. The developers have forgotten to insert them.
  # Turn off the SWIG flag, so that extra C++ member functions of classes in the ML component can be exposed. 


===Download a pre-compiled OpenCV 2.0 build===

There is a faster and trouble-free way to install OpenCV 2.0 that is suitable for PyOpenCV. Just go to the [http://code.google.com/p/pyopencv/downloads/list Downloads] page, download a pre-compiled OpenCV 2.0 build for Windows of your choice, and follow the instructions inside the file to install. I have gone through most of the troubles that could have happened to build them. You do not have to go through the same pain again.

==Install Boost.Python==

Download [http://www.boost.org Boost]. Build the Boost.Python library using either MinGW or TDM GCC, and the toolset=gcc command line argument with Boost's bjam. For example, assuming boost is installed in C:\boost_1_39_0:
{{{
cd c:\boost_1_39_0
bjam toolset=gcc –with-python –build-type=complete stage
}}}
This should create libraries in the stage\lib directory prefixed with boost_python-mgw4X, where 'X' corresponds to the minor version of your compiler. Alternatively, you could use [http://www.boostpro.com BoostPro] installer as that enables you to just install the Boost library you need (much faster than compiling all of Boost!).

==Download PyOpenCV==

Download a PyOpenCV source archive from the [http://code.google.com/p/pyopencv/downloads/list Downloads] page, and extract it. Alternatively, use this command to anonymously check out the latest project source code:
{{{
svn checkout http://pyopencv.googlecode.com/svn/trunk/src/ pyopencv
}}}

===Edit file config.py===

PyOpenCV needs to be told where to find OpenCV 2.0 and Boost.Python. It needs to know the libraries to link against and the directories to search for those libraries. Put this text into file config.py located at PyOpenCV's source directory (potentially with adapted paths and libraries): 
{{{
# OpenCV 2.0 library
opencv_include_dirs = ["C:/Program Files/OpenCV/include/opencv"]
opencv_library_dirs = ["C:/Program Files/OpenCV/lib"]
opencv_runtime_library_dirs = ["C:/Program Files/OpenCV/bin"]
opencv_libraries = ["cvaux200.dll", "ml200.dll", "highgui200.dll", "cv200.dll", "cxcore200.dll"]

# Boost.Python library
boost_include_dirs = ["C:/boost_1_40_0"]
boost_library_dirs = ["C:/boost_1_40_0/stage/lib"]
boost_runtime_library_dirs = ["C:/boost_1_40_0/stage/lib"]
boost_libraries = ["boost_python-mgw44"]
}}}

The libraries options suffixed with 'libraries' are lists of libraries to link against, those suffixed with 'library_dirs' are lists of directories to search for libraries at link-time, and those suffixed with 'runtime_library_dirs' are lists of directories to search for shared (dynamically loaded) libraries at run-time.

==Build and Install PyOpenCV==

Now that you have obtained all the necessary libraries, the remaining steps are straight forward. 

To build PyOpenCV, issue the command
{{{
python setup.py build -c mingw32
}}}
It should take some time between 10 minutes and 45 minutes to build PyOpenCV. Go grab yourself a cup of coffee, sit back, and take a break.

To install PyOpenCV, issue the command
{{{
python setup.py install
}}}

==Install NumPy==

NumPy is *required at run-time* but not at compile-time of PyOpenCV. Follow the instructions at [http://www.scipy.org/Installing_SciPy/Windows SciPy Installation Page for Windows] to install NumPy. It is not necessary to install SciPy though.