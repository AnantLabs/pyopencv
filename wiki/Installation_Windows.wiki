#summary General instructions on installing PyOpenCV on Windows.

Right now, only gcc 4.x compilers are supported, which include TDM GCC and MinGW.

=Using MinGW or TDM GCC=

==Install OpenCV 2.0==

Willow Garage's pre-compiled OpenCV 2.0 builds for Windows are not suitable for PyOpenCV. The reasons are below. It is very likely that you have to 1) build OpenCV 2.0 from source, or 2) download one of our pre-compiled OpenCV 2.0 builds on the [http://code.google.com/p/pyopencv/downloads/list Downloads] page. Do not worry though, you still can use your current build (if any) in other applications. PyOpenCV always tries to load the build you have specified in the 'config.py' file instead of other builds.

Multi-threading (implying the use of OpenMP) is always a risky idea to try. Both OpenCV 2.0 and Boost.Python are not fully thread-safe. If you really insist on using multi-threading and OpenMP, remember that your system may sometimes *crash*.


===Build OpenCV 2.0 from source===

If you have decided to build OpenCV 2.0 from source, take note of the followings:
1) Edit file CMakeLists.txt, search for "-D_GLIBCXX_PARALLEL" and remove it. Basically, when this flag is set, "parallel mode" STL containers are used, which are incompatible with the standard "serialized mode" STL containers.
  a) TDM GCC 4.3.3: include "-lpthread" next to "-lgomp" in the CMakeLists.txt file.
2) To have videoInput included in OpenCV 2.0:
  a) Edit file src/highgui/CMakeLists.txt
  b) At line 199, insert " ole32 oleaut32 uuid" at the end of the list of libraries to be linked against.
3) When using cmake-gui to build, uncheck USE_SSE and USE_SSE2. For some unknown reasons, builds that have any of these flags enabled end up crashing when called from Python.
4) Do not use -mtune=pentium3 or above ---> hang ---> same reason as (3).
5) Turn off the SWIG flag, so that extra C++ member functions of classes in the ML component can be exposed. 