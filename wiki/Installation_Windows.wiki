#summary General instructions on installing PyOpenCV on Windows.

Right now, only gcc 4.x compilers are supported, which include TDM GCC and MinGW.

=Using MinGW or TDM GCC=

==Install OpenCV 2.0==

Willow Garage's pre-compiled OpenCV 2.0 builds for Windows are not suitable for PyOpenCV. The reasons are mainly due to the use of SSE2 and multi-threading (see explanations below). It is very likely that you have to 1) build OpenCV 2.0 from source, or 2) download one of our pre-compiled OpenCV 2.0 builds on the [http://code.google.com/p/pyopencv/downloads/list Downloads] page. Do not worry though, you still can use your current OpenCV 2.0 build (if any) in other applications. PyOpenCV always tries to load the build you have specified in the 'config.py' file instead of other builds.

  # Multi-threading (implying the use of OpenMP) is always a risky idea to try. Both OpenCV 2.0 and Boost.Python are not fully thread-safe. If you insist on using multi-threading and OpenMP, remember that your system may sometimes *crash*.

===Build OpenCV 2.0 from source===

If you have decided to build OpenCV 2.0 from source, take note of the followings:
  # Edit file CMakeLists.txt, search for "-D_GLIBCXX_PARALLEL" and remove it. Basically, when this flag is set, "parallel mode" STL containers are used, which are incompatible with the standard "serialized mode" STL containers used by Boost.Python and other libraries. Of course, if you could recompile every single library that is involved with OpenCV with "-D_GLIBCXX_PARALLEL" flag on, then it is another matter.
    * TDM GCC 4.3.3: include "-lpthread" next to "-lgomp" in the CMakeLists.txt file.
  # When using cmake to build, uncheck USE_SSE and USE_SSE2. For some unidentified reasons, builds that have any of these flags enabled end up crashing when called from Python.
  # Do not use -mtune=pentium3 or above ---> system crashes ---> same reason as in (3).
  # To have videoInput included in OpenCV 2.0:
    * Edit file src/highgui/CMakeLists.txt
    * At line 199, insert " ole32 oleaut32 uuid" at the end of the list of libraries to be linked against.
  # Turn off the SWIG flag, so that extra C++ member functions of classes in the ML component can be exposed. 
  # The libvideoInput.a library file provided by Willow Garage was built with the SJLJ exception handling method. Therefore, you cannot link against it using compilers that provide the Dwarf exception handling method like MinGW 4.4.0, unless you could rebuild this file. In addition, at line 199 of file src/highgui/CMakeLists.txt, insert 3 more libraries "ole32 oleaut32 uuid" after library "strmiids". The developers have forgotten to insert them.


===Download a pre-compiled OpenCV 2.0 build===

There is a faster and trouble-free way to install OpenCV 2.0 that is suitable for PyOpenCV. Just go to the [http://code.google.com/p/pyopencv/downloads/list Downloads] page, download a pre-compiled OpenCV 2.0 build for Windows of your choice, and follow the instructions inside the file to install. I have gone through most of the troubles that could have happened to build them. You do not have to go through the same pain again.

==Install Boost.Python==

Build the Boost.Python libraries using either MinGW or TDM GCC, and the toolset=gcc command line argument with bjam. For example, assuming boost is installed in C:\boost_1_39_0:
{{{
    cd c:\boost_1_39_0
    bjam toolset=gcc –with-python –build-type=complete stage
}}}
This should create libraries in the stage\lib directory prefixed with boost_python-mgw4X, where 'X' corresponds to the minor version of your compiler.