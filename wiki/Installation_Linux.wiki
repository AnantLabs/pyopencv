#summary General instructions for installing PyOpenCV on Linux.

Right now, only gcc 4.x compilers are supported. The reason for this limitation is that I have not tried other C++ compilers. If you have successfully built PyOpenCV with another C++ compiler, your knowledge contribution to this page will be much appreciated.

=Using GCC=

==Install OpenCV 2.0==

Willow Garage's pre-compiled OpenCV 2.0 builds for Windows are not suitable for PyOpenCV. The reasons are mainly due to SSE2 and multi-threading (see explanations below). It is likely that you need to build OpenCV 2.0 from source. Do not worry though, you can still use your current OpenCV 2.0 build (if any) in other applications. PyOpenCV always tries to load the build you have specified in the 'config.py' file instead of other builds.

  # Multi-threading (implying the use of OpenMP) is always a risky idea to try. Both OpenCV 2.0 and Boost.Python are not fully thread-safe. If you insist on using multi-threading and OpenMP, remember that your system may sometimes *crash*.

===Build OpenCV 2.0 from source===

If you have decided to build OpenCV 2.0 from source, take note of the followings:
  # Edit file CMakeLists.txt, search for "-D_GLIBCXX_PARALLEL" and remove it. Basically, when this option is set, "parallel mode" STL containers are used, which are incompatible with the standard "serialized mode" STL containers used by Boost.Python and other libraries. Of course, if you could recompile every single library that is connected to OpenCV with option "-D_GLIBCXX_PARALLEL" set, then it would be another matter.    
  # When using cmake to build, uncheck USE_SSE and USE_SSE2. Do not use -msse2 or any automatic way to generate code using SSE or SSE2. For some unidentified reasons, invoking functions utilizing SSE and SSE2 code from Python may result in a system crash.
  # Do not use -mtune=pentium3 or above ---> system crashes ---> same reason as in (2).
  # Uncheck the SWIG flag, so that extra C++ member functions of classes in the ML component can be available. 


==Install Boost.Python==

Download [http://www.boost.org Boost]. Install Boost.Build and bjam. (to be updated). Make sure the quickstart example of Boost.Python can be built.

==Download PyOpenCV==

Download a PyOpenCV source archive from the [http://code.google.com/p/pyopencv/downloads/list Downloads] page, and extract it. Alternatively, use this command to anonymously check out the latest project source code:
{{{
svn checkout http://pyopencv.googlecode.com/svn/trunk/src/ pyopencv
}}}

===Edit file config.py===

PyOpenCV needs to be told where to find OpenCV 2.0 and Boost.Python. It needs to know the libraries to link against and the directories to search for those libraries. Put this text into file config.py located at PyOpenCV's source directory (potentially with adapted paths and libraries): 
{{{
# OpenCV 2.0 library
opencv_dir = "/usr/local"
opencv_include_dirs = [opencv_dir+"/include/opencv"]
opencv_library_dirs = [opencv_dir+"/lib"]
opencv_libraries = ["cvaux", "ml", "highgui", "cv", "cxcore"]
opencv_runtime_library_dirs = []
opencv_runtime_libraries_to_be_bundled = []

# Boost.Python library
boost_dir = "/usr/include"
boost_include_dirs = [boost_dir]
boost_library_dirs = []
boost_libraries = []
boost_runtime_library_dirs = []
boost_runtime_libraries_to_be_bundled = []
}}}

The libraries options suffixed with 'libraries' are lists of libraries to link against, those suffixed with 'library_dirs' are lists of directories to search for libraries at link-time, and those suffixed with 'runtime_library_dirs' are lists of directories to search for shared (dynamically loaded) libraries at run-time.

==Build and Install PyOpenCV==

Now that you have obtained all the necessary libraries, the remaining steps are straight forward. 

To build PyOpenCV, issue the command
{{{
python setup.py build -c mingw32
}}}
It should take some time between 10 minutes and 45 minutes to build PyOpenCV. Go grab yourself a cup of coffee, sit back, and take a break.

To install PyOpenCV, issue the command
{{{
python setup.py install
}}}

==Install NumPy==

NumPy is *required at run-time* but not at compile-time of PyOpenCV. Follow the instructions at [http://www.scipy.org/Installing_SciPy/Windows SciPy Installation Page for Windows] to install NumPy. It is not necessary to install SciPy though.